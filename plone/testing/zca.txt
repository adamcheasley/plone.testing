Zope Component Architecture layers
==================================

The ZCA layers are found in the module ``plone.testing.zca``:

    >>> from plone.testing import zca

For testing, we need a testrunner

    >>> from zope.testing.testrunner import runner

Sandbox layer
-------------

The SANDBOX layer is used to set up a clean component registry between each
test. It uses ``zope.testing.cleanup`` to clean up all global state.

It has no bases:

    >>> "%s.%s" % (zca.SANDBOX.__module__, zca.SANDBOX.__name__,)
    'plone.testing.zca.Sandbox'

    >>> zca.SANDBOX.__bases__
    ()

The component registry is cleaned up between each test.

    >>> from zope.interface import Interface
    >>> from zope.component import provideUtility
    
    >>> class DummyUtility(object):
    ...     def __init__(self, name):
    ...         self.name = name
    ...     def __repr__(self):
    ...         return "<%s>" % self.name

    >>> provideUtility(DummyUtility("Dummy"), provides=Interface, name="test-dummy")

    >>> from zope.component import queryUtility
    >>> queryUtility(Interface, name="test-dummy")
    <Dummy>

Layer setup does nothing.

    >>> options = runner.get_options([], [])
    >>> setupLayers = {}
    >>> runner.setup_layer(options, zca.SANDBOX, setupLayers)
    Set up plone.testing.zca.Sandbox in ... seconds.

Let's now simulate a test. Before any test setup has happened, our previously
registered utility is still there.

    >>> queryUtility(Interface, name="test-dummy")
    <Dummy>

On test setup, it disappears.

    >>> zca.SANDBOX.testSetUp()

    >>> queryUtility(Interface, name="test-dummy") is None
    True

The test would now execute. It may register some components.

    >>> provideUtility(DummyUtility("Dummy2"), provides=Interface, name="test-dummy")
    >>> queryUtility(Interface, name="test-dummy")
    <Dummy2>

On test tear-down, this disappears.

    >>> zca.SANDBOX.testTearDown()

    >>> queryUtility(Interface, name="test-dummy") is None
    True

Layer tear-down does nothing.

    >>> runner.tear_down_unneeded(options, [], setupLayers)
    Tear down plone.testing.zca.Sandbox in ... seconds.

Event testing
-------------

The EVENT_TESTING layer extends the SANDBOX layer to add the necessary
registrations for ``zope.component.eventtesting`` to work.

    >>> "%s.%s" % (zca.EVENT_TESTING.__module__, zca.EVENT_TESTING.__name__,)
    'plone.testing.zca.EventTesting'

    >>> zca.EVENT_TESTING.__bases__
    (<Layer 'plone.testing.zca.Sandbox'>,)

Before the test, the component registry is empty and ``getEvents()`` returns
nothing, even if an event is fired.

    >>> from zope.component.eventtesting import getEvents

    >>> class DummyEvent(object):
    ...     def __repr__(self):
    ...         return "<Dummy event>"
    
    >>> from zope.event import notify
    >>> notify(DummyEvent())

    >>> getEvents()
    []

Layer setup does nothing.

    >>> options = runner.get_options([], [])
    >>> setupLayers = {}
    >>> runner.setup_layer(options, zca.EVENT_TESTING, setupLayers)
    Set up plone.testing.zca.Sandbox in ... seconds.
    Set up plone.testing.zca.EventTesting in ... seconds.

Let's now simulate a test. On test setup, the event testing list is emptied.
    
    >>> zca.SANDBOX.testSetUp()
    >>> zca.EVENT_TESTING.testSetUp()

    >>> getEvents()
    []

The test would now execute. It may fire some events, which would show up in
the event testing list.

    >>> notify(DummyEvent())
    >>> getEvents()
    [<Dummy event>]

On test tear-down, the list is emptied again

    >>> zca.EVENT_TESTING.testTearDown()
    >>> zca.SANDBOX.testTearDown()

    >>> getEvents()
    []

Layer tear-down does nothing.

    >>> runner.tear_down_unneeded(options, [], setupLayers)
    Tear down plone.testing.zca.EventTesting in ... seconds.
    Tear down plone.testing.zca.Sandbox in ... seconds.

Basic ZCML directives
---------------------

The ZCML_DIRECTIVES layer extends the SANDBOX layer to add a ZCML
configuration context with the basic ``zope.component`` directives available.

    >>> "%s.%s" % (zca.ZCML_DIRECTIVES.__module__, zca.ZCML_DIRECTIVES.__name__,)
    'plone.testing.zca.ZCMLDirectives'

    >>> zca.ZCML_DIRECTIVES.__bases__
    (<Layer 'plone.testing.zca.Sandbox'>,)

Before the test, we cannot use e.g. a ``<utility />`` directive without
loading the necessary ``meta.zcml`` files.

    >>> from zope.configuration import xmlconfig
    >>> xmlconfig.string("""\
    ... <configure package="plone.testing" xmlns="http://namespaces.zope.org/zope">
    ...     <utility factory=".tests.DummyUtility" provides="zope.interface.Interface" name="test-dummy" />
    ... </configure>""")
    Traceback (most recent call last):
    ...
    ZopeXMLConfigurationError: File "<string>", line 2.4
        ConfigurationError: ('Unknown directive', u'http://namespaces.zope.org/zope', u'utility')

Layer setup creates a configuration context we can use to load further
configuration.

    >>> options = runner.get_options([], [])
    >>> setupLayers = {}
    >>> runner.setup_layer(options, zca.ZCML_DIRECTIVES, setupLayers)
    Set up plone.testing.zca.Sandbox in ... seconds.
    Set up plone.testing.zca.ZCMLDirectives in ... seconds.

Let's now simulate a test that uses this configuration context to load the
same ZCML string.
    
    >>> zca.SANDBOX.testSetUp()
    >>> zca.ZCML_DIRECTIVES.testSetUp()

    >>> context = zca.ZCML_DIRECTIVES['configurationContext'] # would normally be self.layer['configurationContext']
    >>> xmlconfig.string("""\
    ... <configure package="plone.testing" xmlns="http://namespaces.zope.org/zope">
    ...     <utility factory=".tests.DummyUtility" provides="zope.interface.Interface" name="test-dummy" />
    ... </configure>""", context=context) is context
    True
    
The utility is now registered:

    >>> queryUtility(Interface, name="test-dummy")
    <Dummy utility>

On test tear-down, the component architecture is torn down courtesy of the 
SANDBOX layer.

    >>> zca.ZCML_DIRECTIVES.testTearDown()
    >>> zca.SANDBOX.testTearDown()

    >>> queryUtility(Interface, name="test-dummy") is None
    True

Layer tear-down deletes the configuration context resource.

    >>> runner.tear_down_unneeded(options, [], setupLayers)
    Tear down plone.testing.zca.ZCMLDirectives in ... seconds.
    Tear down plone.testing.zca.Sandbox in ... seconds.

    >>> zca.ZCML_DIRECTIVES.get('configurationContext', None) is None
    True
