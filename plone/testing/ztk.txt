Zope Toolkit layers
-------------------

The Zope Toolkit layers are found in the module ``plone.testing.ztk``:

    >>> from plone.testing import ztk

For testing, we need a testrunner

    >>> from zope.testing.testrunner import runner

Placeless setup layer
~~~~~~~~~~~~~~~~~~~~~

The ``PLACELESS`` layer is used to set up several core components for each
test. It also starts a new interaction with the public checker, so that
``zope.security``-style security proxies will work.

``PLACELESS`` is based on ``zca.EVENT_TESTING``.

    >>> "%s.%s" % (ztk.PLACELESS.__module__, ztk.PLACELESS.__name__,)
    'plone.testing.ztk.Placeless'

    >>> ztk.PLACELESS.__bases__
    (<Layer 'plone.testing.zca.EventTesting'>,)

Before the layer sets up a test fixture, the component registry is empty.

    >>> from zope.component import getSiteManager
    >>> siteManager = getSiteManager()
    >>> list(siteManager.registeredAdapters())
    []

Layer setup does nothing.

    >>> options = runner.get_options([], [])
    >>> setupLayers = {}
    >>> runner.setup_layer(options, ztk.PLACELESS, setupLayers)
    Set up plone.testing.zca.Sandbox in ... seconds.
    Set up plone.testing.zca.EventTesting in ... seconds.
    Set up plone.testing.ztk.Placeless in ... seconds.

Let's now simulate a test. The components are all registered in the test
setup.
    
    >>> from plone.testing import zca
    >>> zca.SANDBOX.testSetUp()
    >>> zca.EVENT_TESTING.testSetUp()
    >>> ztk.PLACELESS.testSetUp()

A default name chooser is registered

    >>> from zope.container.interfaces import INameChooser, IWriteContainer
    >>> [x.factory for x in siteManager.registeredAdapters() 
    ...  if x.provided==INameChooser and x.required==(IWriteContainer,) and x.name==u""]
    [<class 'zope.container.contained.NameChooser'>]

The standard ``HTTPCharsets`` and ``BrowserLanguages`` adapters are set up
by ``zope.i18n``:

    >>> from zope.i18n.interfaces import IUserPreferredLanguages
    >>> from zope.i18n.interfaces import IUserPreferredCharsets
    >>> from zope.publisher.interfaces.http import IHTTPRequest

    >>> [x.factory for x in siteManager.registeredAdapters() 
    ...  if x.provided==IUserPreferredLanguages and x.required==(IHTTPRequest,) and x.name==u""]
    [<class 'zope.publisher.browser.BrowserLanguages'>]

    >>> [x.factory for x in siteManager.registeredAdapters() 
    ...  if x.provided==IUserPreferredCharsets and x.required==(IHTTPRequest,) and x.name==u""]
    [<class 'zope.publisher.http.HTTPCharsets'>]

Default password managers are set up by ``zope.password``:

    >>> from zope.password.interfaces import IPasswordManager
    >>> sorted([x.name for x in siteManager.registeredUtilities() if x.provided==IPasswordManager])
    ['MD5', 'Plain Text', 'SHA1', 'SSHA']

The default ``IAbsoluteURL`` view is set up, both as a named view and as a
multi-adapter.

    >>> from zope.interface import Interface
    >>> from zope.publisher.interfaces.browser import IDefaultBrowserLayer
    >>> from zope.traversing.browser.interfaces import IAbsoluteURL

    >>> [x.factory for x in siteManager.registeredAdapters() 
    ...  if x.provided==Interface and x.required==(Interface, IDefaultBrowserLayer) 
    ...   and x.name==u"absolute_url"]
    [<class 'zope.traversing.browser.absoluteurl.AbsoluteURL'>]
    
    >>> [x.factory for x in siteManager.registeredAdapters() 
    ...  if x.provided==IAbsoluteURL and x.required==(Interface, IDefaultBrowserLayer) 
    ...   and x.name==u""]
    [<class 'zope.traversing.browser.absoluteurl.AbsoluteURL'>]

A public checker (``zope.Public`` permission) is installed.

    >>> from zope.security.interfaces import IPermission
    >>> [x.name for x in siteManager.registeredUtilities() if x.provided==IPermission]
    ['zope.Public']

A new interaction is added.

    >>> from zope.security.management import getInteraction
    >>> getInteraction()
    <zope.security.simplepolicies.ParanoidSecurityPolicy object at ...>
    
The test would then execute.

On test tear-down, the registry is cleaned again disappears.

    >>> ztk.PLACELESS.testTearDown()
    >>> zca.EVENT_TESTING.testTearDown()
    >>> zca.SANDBOX.testTearDown()

    >>> list(siteManager.registeredAdapters())
    []
    >>> list(siteManager.registeredUtilities())
    []
    >>> getInteraction()
    Traceback (most recent call last):
    ...
    NoInteraction
    
Layer tear-down does nothing.

    >>> runner.tear_down_unneeded(options, [], setupLayers)
    Tear down plone.testing.ztk.Placeless in ... seconds.
    Tear down plone.testing.zca.EventTesting in ... seconds.
    Tear down plone.testing.zca.Sandbox in ... seconds.

ZCML directives
~~~~~~~~~~~~~~~

The ``ztk.ZCML_DIRECTIVES`` layer extends the ``zca.ZCML_DIRECTIVES`` layer to
extend its ZCML configuration context with the ``zope.app.publisher`` and
``zope.security`` directives available. It is also based on the ``PLACELESS``
layer outlined above.

    >>> "%s.%s" % (ztk.ZCML_DIRECTIVES.__module__, ztk.ZCML_DIRECTIVES.__name__,)
    'plone.testing.ztk.ZCMLDirectives'

    >>> ztk.ZCML_DIRECTIVES.__bases__
    (<Layer 'plone.testing.zca.ZCMLDirectives'>, <Layer 'plone.testing.ztk.Placeless'>)

Before the test, we cannot use e.g. the ``<permission />`` or
``<browser:view />`` directives without loading the necessary ``meta.zcml``
files.

    >>> from zope.configuration import xmlconfig
    >>> xmlconfig.string("""\
    ... <configure package="plone.testing"
    ...     xmlns="http://namespaces.zope.org/zope"
    ...     xmlns:browser="http://namespaces.zope.org/browser">
    ...     <permission id="plone.testing.Test" title="plone.testing: Test" />
    ...     <browser:view
    ...         for="*"
    ...         name="plone.testing-test"
    ...         class="plone.testing.tests.DummyView"
    ...         permission="zope.Public"
    ...         />
    ... </configure>""")
    Traceback (most recent call last):
    ...
    ZopeXMLConfigurationError: File "<string>", line 4.4
        ConfigurationError: ('Unknown directive', u'http://namespaces.zope.org/zope', u'permission')

Layer setup creates a configuration context we can use to load further
configuration.

    >>> options = runner.get_options([], [])
    >>> setupLayers = {}
    >>> runner.setup_layer(options, ztk.ZCML_DIRECTIVES, setupLayers)
    Set up plone.testing.zca.Sandbox in ... seconds.
    Set up plone.testing.zca.ZCMLDirectives in ... seconds.
    Set up plone.testing.zca.EventTesting in ... seconds.
    Set up plone.testing.ztk.Placeless in ... seconds.
    Set up plone.testing.ztk.ZCMLDirectives in ... seconds.


Let's now simulate a test that uses this configuration context to load the
same ZCML string.
    
    >>> zca.SANDBOX.testSetUp()
    >>> zca.ZCML_DIRECTIVES.testSetUp()
    >>> ztk.PLACELESS.testSetUp()
    >>> ztk.ZCML_DIRECTIVES.testSetUp()

    >>> context = zca.ZCML_DIRECTIVES['configurationContext'] # would normally be self.layer['configurationContext']
    >>> xmlconfig.string("""\
    ... <configure package="plone.testing"
    ...     xmlns="http://namespaces.zope.org/zope"
    ...     xmlns:browser="http://namespaces.zope.org/browser">
    ...     <permission id="plone.testing.Test" title="plone.testing: Test" />
    ...     <browser:view
    ...         for="*"
    ...         name="plone.testing-test"
    ...         class="plone.testing.tests.DummyView"
    ...         permission="zope.Public"
    ...         />
    ... </configure>""", context=context) is context
    True
    
The permission and view are now registered:
    
    >>> from zope.component import queryUtility
    >>> queryUtility(IPermission, name=u"plone.testing.Test")
    <zope.security.permission.Permission object at ...>
    
    >>> [x.factory for x in siteManager.registeredAdapters() 
    ...  if x.provided==Interface and x.required==(Interface, IDefaultBrowserLayer) 
    ...   and x.name==u"plone.testing-test"]
    [<class 'zope.app.publisher.browser.viewmeta.plone.testing-test'>]

On test tear-down, the component architecture is torn down courtesy of the 
SANDBOX layer.

    >>> ztk.ZCML_DIRECTIVES.testTearDown()
    >>> ztk.PLACELESS.testTearDown()
    >>> zca.ZCML_DIRECTIVES.testTearDown()
    >>> zca.SANDBOX.testTearDown()

    >>> queryUtility(IPermission, name=u"plone.testing.Test") is None
    True

    >>> [x.factory for x in siteManager.registeredAdapters() 
    ...  if x.provided==Interface and x.required==(Interface, IDefaultBrowserLayer) 
    ...   and x.name==u"plone.testing-test"]
    []

Layer tear-down does nothing.

    >>> runner.tear_down_unneeded(options, [], setupLayers)
    Tear down plone.testing.ztk.ZCMLDirectives in ... seconds.
    Tear down plone.testing.ztk.Placeless in ... seconds.
    Tear down plone.testing.zca.ZCMLDirectives in ... seconds.
    Tear down plone.testing.zca.EventTesting in ... seconds.
    Tear down plone.testing.zca.Sandbox in ... seconds.

    >>> zca.ZCML_DIRECTIVES.get('configurationContext', None) is None
    True
